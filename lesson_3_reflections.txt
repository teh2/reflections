I wonder what the first reflection for lesson 3 is going to be?

  No idea, but I bet it'll be interesting.

So, here it is:

When would you want to use a remote repository rather than keeping all your work local?

  I would choose to use a remote repository in at least two situations. First, when I'm working with other developers - that way, we can all see the code. And we can work together. Second, I'd use a remote repository when it's likely that I'll be making updates from multiple computers. This would give me the ability to update the code from anywhere, on any device.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	If you are in the middle of a major feature addition, you would be better off working from a stable code base. If your collaborator starts pushing a major change, and gets distracted in the middle, you might get only part of the change and your local copy might not work very well.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	Branches are logical groupings of commits. clones are complete mirrors of a repo. forks are also mirrors of repos, but with much different permissions. Branches are for separating different lines of development. Clones are for duplicating entire repositories on new machines. And Forks are for duplicating entire repositories on github itself. Hmm. Not totally happy with this explanation, but it's clear in my head.

What is the benefit of having a copy of the last known state of the remote stored locally?

	You want to fetch a local copy of the remote when you are going to be working off-line for a while, and you might need the work from the remote while you are disconnected. It's also useful in preparing to merge conflicting changes between local and remote versions.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	I've done collaboration with floppy disks in the past. I've used networked chared hard drives. I've done extreme programming where both collaborators sit at the same computer. As far as easier and harder... almost everything's easier with a version control tool, because it's mostly automated, and there are reminders everywhere to be conscious of your collaborators. The one thing that I will say in favor of manual collaboration is that I've found the pairs programming of extreme to be quite effective in terms of avoiding the entire merge process all together.


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	As before, branches are for keeping separate lines of coding separate. So, when doing experimental things, or complex things, or things that might "break everything", it's a good idea to keep them separate from the main line of code until they are complete, tested, and ready to be part of the main line.









