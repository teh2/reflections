

What happens when you initialize a repository? Why do you need to do it?

	It creats the .git folder, which holds the initial metadata for the repository. I assume that it will eventually hold all of the commit information as well...

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is not a "real" directory. It just exists as meta data (down inside of .git). But it allows you to collect up the pieces of your project in preparation for the commit. I would think that some times, it would be difficult to pull together all of the items for a commit in one enormous command line. And, what if you changed your mind? There must be a way to remove something from the "staging area". Right?

How can you use the staging area to make sure you have one commit per logical change?

	When you are ready to commit, you can do "git status" to see all of your current changes. Then, you can "git add" just the changes for a particular logical change to the staging area, and commit that. Then repeat, until all logical changes have been committed.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	As mentioned in the lesson: experiments, new features, etc. But, I think the most useful use of branches is in situations where multiple developers are working on parallel enhancements. In this case, commits in one branch don't affect another branch. I've also used branches to "save off" a known good working version of a project - either for release, or just to have a solid base to step back to if things go awry.

How do the diagrams help you visualize the branch structure?

	It's easy to lose mental track of what's going on, because it's easy to get a bunch of branches in the works, and have lots of commits thrown at each branch. And how do you remember it all? You need a picture!
	
	It's interesting that the Udacity instructors draw commit relationships with arrows pointing to the "parent". I typically draw relationships with the arrows pointing to the "child"...

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	merging branches interleaves all of the commits of the two branches together. It's currently a little unclear which branch is the source and which is the target... If I merge a branch that I currently have checked out, do I end up in that same branch? Or do I switch to the branch I merged? If I merge two branches that are neither one the branch I've currently checked out, where do I end up?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	automatic merging is a huge time saver. It also minimizes human error that could get introduced during the process of cut and paste editing that would be necessary to manually merge everything.

This is a test reflection. I'm trying to get N++ to work as the commit editor...



















